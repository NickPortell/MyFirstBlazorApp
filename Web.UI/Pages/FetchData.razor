@page "/fetchdata"
@inject HttpClient Http
@using Web.UI.Dto.Request
@using Web.UI.Dto.Response
@using Web.UI.Models.Pokemon
@using Web.UI.PokeapiService.Repositories
@*@using Web.UI.Dto.Request*@
@*@using Web.UI.PokeapiService.Repositories*@

<h1>Pokemon List</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (PokemonList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pokemon in ResponseList)
            {
                <tr>
                    <td>@pokemon.Name</td>
                    <td>@pokemon.Id</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PokemonRepository PokeRepo = new PokemonRepository();


    private PokemonCollection Pokes;
    private Pokemon[] PokemonList;
    private List<GetPokemonResponseDto> ResponseList;

    protected override async Task OnInitializedAsync()
    {
        Pokes = await Http.GetFromJsonAsync<PokemonCollection>("https://pokeapi.co/api/v2/pokemon?limit=10");

        PokemonList = Pokes.Results;

        ResponseList = await GetPokeData(PokemonList);
    }

    protected async Task<List<GetPokemonResponseDto>> GetPokeData(Pokemon[] pokemons)
    {
        List<GetPokemonResponseDto> pokeList = new List<GetPokemonResponseDto>();

        foreach (var pokemon in pokemons)
        {
            string id = pokemon.Url.Split('/')[pokemon.Url.Split('/').Length - 2];
            var request = new GetPokemonRequestDto()
            {
                //PokemonId = pokemon.Url.Split('/')[pokemon.Url.Length - 2],
                PokemonName = pokemon.Name
            };
            var data = await PokeRepo.GetPokemonByName(request);
            pokeList.Add(data);
        }

        return pokeList;
    }



}

@page "/fetchdata"
@using PokemonBattle.Models.V1.Pokemon
@using PokemonBattle.Infrastructure.Repositories
@inject ILocalStorageService LocalStorage;

<h1>Pokemon List</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (isInitialized == false)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th>Sprite</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pokemon in PokemonDataList)
            {
                <tr>
                    <td>@pokemon.Name</td>
                    <td>@pokemon.Id</td>
                    <td><img src="@pokemon.Sprites.Front_Default" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PokemonRepository PokeRepo = new PokemonRepository();
    private SpriteRepository SpriteRepo = new SpriteRepository();
    private PokemonCollection PokeCollection;
    private List<PokemonData> PokemonDataList;
    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        await GetTableData();
        isInitialized = PokeCollection != null && PokemonDataList != null;
    }

    protected async Task GetTableData()
    {
        PokeCollection = await GetPokemonCollection();
        PokemonDataList = await GetPokemonDataList();
    }

    public async void Clear()
    {
        //this will clear the local storage
        await LocalStorage.ClearAsync();
    }

    public async Task<PokemonCollection> GetPokemonCollection()
    {
        bool localStorageHasPokeCollection = await LocalStorage.ContainKeyAsync("PokeCollection");
        if (localStorageHasPokeCollection)
        {
            var pokeCollectionLocally = await LocalStorage.GetItemAsync<PokemonCollection>("PokeCollection");

            if (pokeCollectionLocally == null)
            {
                var mappedPokemon = await PokeRepo.MapPokemonCollection(10, 10);
                await LocalStorage.SetItemAsync("PokeCollection", mappedPokemon);
            }
        }
        else
        {
            var mappedPokemon = await PokeRepo.MapPokemonCollection(10, 10);
            await LocalStorage.SetItemAsync("PokeCollection", mappedPokemon);
        }
        return await LocalStorage.GetItemAsync<PokemonCollection>("PokeCollection");
    }

    public async Task<List<PokemonData>> GetPokemonDataList()
    {
        bool localStorageHasPokemonDataList = await LocalStorage.ContainKeyAsync("PokemonDataList");
        if (localStorageHasPokemonDataList)
        {
            var pokemonDataList = await LocalStorage.GetItemAsync<List<PokemonData>>("PokemonDataList");

            if (pokemonDataList == null)
            {
                var pokeData = await GetPokeData(PokeCollection.Results);
                await LocalStorage.SetItemAsync("PokemonDataList", pokeData);
            }
        }
        else
        {
            var pokeData = await GetPokeData(PokeCollection.Results);
            await LocalStorage.SetItemAsync("PokemonDataList", pokeData);
        }
        return await LocalStorage.GetItemAsync<List<PokemonData>>("PokemonDataList");
    }

    public async Task<List<PokemonData>> GetPokeData(Pokemon[] pokemons)
    {
        List<PokemonData> pokemonDataList = new List<PokemonData>();

        foreach (var pokemon in pokemons)
        {
            PokemonData poke = new PokemonData
            {
                Name = pokemon.Name
            };

            poke = await PokeRepo.MapPokemonToPokemonData(poke);

            pokemonDataList.Add(poke);
        }

        return pokemonDataList;
    }
}
